{"posts":[{"title":"Azoth开发日志_2023_08","text":"8月，逐渐走上正轨，各个功能拼起来有点游戏的雏形了。趁还没开学加把劲，争取做到能玩能动的程度 8.11. 地图素材重置基础的地图包括三种地形：草地、森林、山地。 六边形的地形想要显示的更加自然就需要更多的差异化素材，以及基于地块位置的区别化。 例如： 当一个森林格子处于森林地块和草原地块的边界时，森林就应该更加稀疏。 当一个山地格子处于山地地块和草原地块的边界时，山地应更加平矮。 当前方案不是最优解，以目前同一位置3~5个差异化的数量仍然会到显得地图上有些重复。且不同地块之间的过度显得比较生硬。 考虑以下优化方案： 利用噪声/AI生成方式降低差异化素材的绘制成本。使用更大量的素材来弥补问题。 将固定的地块优化为前景+后景的组合。即绘制10种树木和3种后景，通过树木的随机分布以及随机搭配可以达到更好的差异化效果，避免地块大量重复。 8.31. 物理模拟系统设计目前的碰撞战斗系统经过一番修改后，采用纯2D的方式进行计算，可以有效减少一部分工作量。 在此基础之上出现了一个设计上的问题，关于碰撞动画的触发时机。 在一次合理的碰撞过程中经历 即将碰撞（举刀并开始挥动）-&gt;发生碰撞（命中目标，触发击中特效） -&gt; 结束碰撞（收刀回到奔跑状态） 而在仅使用自动物理系统的情形下我们无法获取“即将碰撞”的时间点，只能从“发生碰撞”的时间点开始进行动画，就会无可避免地出现动画延迟，往往出现两个相撞角色到分开后才触发击中特效。 为了预知“即将碰撞”的时间点，就需要通过物理系统进行模拟，预测在角色被发射后的碰撞事件。 基于原本设计的“预测线”机制进行以下修改： 在每场战斗开始时，创建一个PhysicScene，称为模拟场景，将真实场景中所有参与碰撞的碰撞体复制到模拟场景并记录彼此关联。 在绘制预测线时，将参数赋予模拟场景，记录控制角色的完整路线和发生的所有碰撞事件的帧。 依据碰撞事件帧和提前量计算“即将碰撞”时间点。 击发后开始真实场景运行，在“即将碰撞”时间点触发攻击动画，即可完美在发生碰撞时命中目标。 2. 需要一个demo展示方式由于之前尝试过webgl的部署，这次也打算用webgl的方式结合github进行public展示。不过目前完成度还为时尚早。 8.51. 技能系统重做8.61. 武器适配技能2. 捏人界面搭建8.81. 自制骨骼2. 动作动画8.101. 职业系统与皮肤8.141. 游玩体验思考8.171. 跑图优化2. 无缝地图8.181. 寻路机制修复2. 遇敌系统重制8.201. 数值体验思考8.221. 技能效果实装2. 游戏设定更新8.241. 怪物实装2. 关于怪物差异化思考8.271. 角色详情页和背包页重构","link":"/2023/08/05/devlog-azoth-23-8/"},{"title":"Azoth开发日志_2023_09","text":"九月份开始了，基础功能的实现也逐渐接近完善。暂定一个小目标，先把UI和表层逻辑做做整齐，好歹看起来像一个半成品。 9.11. UI/场景切换过度效果虽然目前除了生成地图稍微需要1~2s的停顿，其他操作都很快速，但是切换UI和场景的时候还是加一个过度比较舒服。于是做一个最简单的过度（先变黑后变亮）。 基础思路是使用异步加载来切换场景，首先变黑，然后等异步加载完成，然后变亮，非常简单: 12345678910111213141516171819202122232425262728293031private IEnumerator LoadSceneAsync(string scene){ AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(scene); asyncLoad.allowSceneActivation = false; fadeImage.gameObject.SetActive(true); // 渐暗效果 float timer = 0; while (timer &lt; fadeDuration) { float alpha = Mathf.Lerp(0, 1, timer / fadeDuration); fadeImage.color = new Color(0, 0, 0, alpha); timer += Time.deltaTime; yield return null; } asyncLoad.allowSceneActivation = true; yield return asyncLoad; // 场景加载完成后，渐亮效果 timer = 0; while (timer &lt; fadeDuration) { // 更新渐暗遮罩的Alpha值 float alpha = Mathf.Lerp(1, 0, timer / fadeDuration); fadeImage.color = new Color(0, 0, 0, alpha); timer += Time.deltaTime; yield return null; } fadeImage.gameObject.SetActive(false);} 效果令人满意，不过考虑到UI切换的逻辑比较复杂，和异步加载同时还需要一些自定义操作，比如某些panel的开开关关。因此加一个Action参数来传递这些操作。 12345678910111213private IEnumerator LoadSceneAsync(string scene, System.Action customPhaseCAction = null){ ...... yield return asyncLoad; // 执行阶段（如果已定义） if (customPhaseCAction != null) { customPhaseCAction.Invoke(); } ......} 方便了很多，随时随地都能调用过度效果。 9.31. 主菜单逻辑优化之前一直没把握住主菜单的逻辑，参照传统rpg模式的话由于存档的意义不一样，使得逻辑非常古怪 其实和黑魂的存档模式比较接近，都是以“角色档案”作为储存单元，而非一个角色在不同时间点上的记录。 遂改之。 顺便增加了一个“继续游戏”的入口，再适配一下存档检测逻辑。主要涉及了一个时间比较的问题（因为需要继续最新的存档）。因为原本是用string储存了存档的修改时间，直接比较似乎有点困难。遂将其还原到Date类型。 123456public static System.DateTime StringToDate(string str){ System.DateTime resultDateTime; bool success = System.DateTime.TryParseExact(str, &quot;yyyy.MM.dd-hh:mm:ss&quot;, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out resultDateTime); return resultDateTime;} ↑现已加入MyUtils工具包 date类型可以直接通过大于小于号来比较，很方便。 9.51. 存档界面优化大改了一下存档窗口的接口，加上了当前角色的名字和肖像。 也顺便重绘了一下对应的UI，让风格跟主界面统一。 像素完美的情况下想使用Tile来复用素材变得稍微有些困难，很多地方需要单独绘制素材。 2. 修复战斗Bug之前战斗场景在重复进入时会爆红。 排查了一下，主要原因是在重置物理模拟场景时没重置角色列表，导致绑定了几个不存在的空角色进去，修复之。 9.71. 音效配置去素材网上淘了不少免费素材。主要是案件音效和BGM，战斗音效等设计技能的时候再一起制作 1.1 主要做了一个简单Manager，留出了音量和音效的接口，方便后续使用。 123456789101112131415161718192021222324private AudioSource buttonClickSound; // 音效源public AudioClip buttonClick;[Range(0f, 1f)]public float volume = 1f; // 音效音量// 播放按钮音效public void PlayButtonClickSound(AudioClip audioClip = null){ if (audioClip == null) audioClip = buttonClick; if (buttonClickSound != null) { buttonClickSound.clip = audioClip; buttonClickSound.volume = volume; buttonClickSound.time = audioClip.length * 0.1f; buttonClickSound.Play(); }}// 设置全局音效音量public void SetVolume(float newVolume){ volume = newVolume;} ​ 给manager一个缺省值，这样直接挂脚本或者调接口就能发出默认的按键音效，很方便 1.2 音效延迟问题 可能不应该在按键按下之后才触发音效，这样音效“咔哒”的声音会延迟一点点出现，很难受。 目前解决方法是从一个固定的百分比位置（20%）的地方开始播放音效，能稍微缓解一下问题。 12buttonClickSound.time = audioClip.length * 0.1f;buttonClickSound.Play(); 9.81. UI抖动用DoTween实现了一个简单的往复移动效果，让标题动起来 123456789101112131415161718192021222324252627using UnityEngine;using UnityEngine.UI;using DG.Tweening;public class FloatUI : MonoBehaviour{ public float xSpeed = 1f; public float ySpeed = 1f; public float floatFrequency = 1f; // 浮动频率 private Vector3 initialPosition; private Tweener floatTween; private void Start() { initialPosition = transform.localPosition; StartFloating(); } private void StartFloating() { floatTween = transform.DOLocalMove(initialPosition + new Vector3(xSpeed, ySpeed, 0), floatFrequency) .SetLoops(-1, LoopType.Yoyo) .SetEase(Ease.InOutSine); }} 将脚本挂在任意需要动起来的UI上，即可实现漂浮（最后用在了大标题上） 9.91. 人物状态栏UI制作之前人物状态栏一直用的临时素材，这次统一规整一下。 1.1 美术风格统一，之前制作的主界面都是石雕浮雕的风格，加之像素画风。 目前采用AI生成浮雕花纹+手绘转绘的方式制作UI装饰。不过考虑到像素画风的特点可以考虑利用python+opencv自动处理一下图片来减轻单人开发的负担。 大致思路：原始图片 -&gt; 灰度图片 -&gt; (0, 80, 160, 255)用两个阈值把灰度分三段 -&gt; 阈值内灰度设为固定值 -&gt; 按灰度图填色（最终也只需要三种颜色）。如此一来便省去了手工调色的麻烦，但手绘修改应该难以避免。 不过目前需求还没有到需要批量处理的程度，暂时先凑合用。 1.2 人物状态栏轻量化 想尽可能让人物的状态栏简单点，目前的设计思路有点像《神界原罪》这种任务面板和背包的模式去做，不过毕竟没有那么多信息需要展示。目前加入了技能和武器的选择界面，加上一个人物的战斗小人。 1.3 战斗小人展示在UI面板上 按照设计思路，战斗小人需要从游戏空间（spriterenderer）搬到UI空间上。 使用Camera + RenderTexture的组合，成功完成转换。 需要注意的是和UI素材一样，RenderTexture需要关闭抗锯齿、压缩等选项来保持像素完美。最终结果符合预期。 9.111. 简单部署到webgl想着要展示展示游戏开发进程，而Unity的跨平台能力如此强劲，于是乎尝试直接粗暴打包webgl，然后放到git上进行游玩。 1.1 切换webgl平台，直接打包，过程顺利 1.2 本地运行，感觉良好 1.3 git开新仓库，上传webgl包。设置pages。 1.4 访问页面https://www.biscuitsword.com/Azoth.github.io/ 寄。 1.5 主要问题是加载到90%时卡住，更换模板的话则直接黑屏，推测player setting有问题，或者是因为初始化的时候尝试调取本地资源。 1.6 （与Gpt）一番尝试，将player setting中的Compression format改为Disabled之后问题解决。皆大欢喜。 1.7 而对Application.persistentDataPath的读写居然能够在Webgl下正常运行令人惊讶。我 推测在webgl下，该目录的读写会写入浏览器的缓存中保存，因为清除缓存/更换浏览器/无痕浏览都会使得存档消失。此外对Resources.Load的调用也能够正常运作，说明Unity打包webgl时和standalone打包一样将resources资源打包，白操作一场（Gpt害人不浅）。 1.8 Demo地址 https://www.biscuitsword.com/Azoth.github.io/ 之后的开发过程中也会顺便更新Demo。 2. 遗留问题2.1 在WebGL上人物的服装不知道为什么消失了，而人物的肢体却能够正常加载。 虽然服装是通过Resources.Load的方式动态载入的，但是其他资源都能够正常加载，十分古怪，不过不影响体验，而且webgl不是最终目标平台，暂且放过。","link":"/2023/09/11/devlog-azoth-23-9/"},{"title":"Azoth开发日志_2023_07","text":"7月正好到月底，打算总结一下陆陆续续到现在的开发进度，顺便也捣鼓好了这个博客，可以接着在这里写写开发日志。","link":"/2023/08/01/devlog-azoth-23-7/"}],"tags":[{"name":"devlog","slug":"devlog","link":"/tags/devlog/"}],"categories":[],"pages":[]}